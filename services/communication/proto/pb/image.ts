/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: image.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace pb {
    export class Image extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            url?: string;
            width?: number;
            height?: number;
            cloud_name?: string;
            extension?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("width" in data && data.width != undefined) {
                    this.width = data.width;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("cloud_name" in data && data.cloud_name != undefined) {
                    this.cloud_name = data.cloud_name;
                }
                if ("extension" in data && data.extension != undefined) {
                    this.extension = data.extension;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get width() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set width(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get cloud_name() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set cloud_name(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get extension() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set extension(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            id?: number;
            url?: string;
            width?: number;
            height?: number;
            cloud_name?: string;
            extension?: string;
        }): Image {
            const message = new Image({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.width != null) {
                message.width = data.width;
            }
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.cloud_name != null) {
                message.cloud_name = data.cloud_name;
            }
            if (data.extension != null) {
                message.extension = data.extension;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                url?: string;
                width?: number;
                height?: number;
                cloud_name?: string;
                extension?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.width != null) {
                data.width = this.width;
            }
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.cloud_name != null) {
                data.cloud_name = this.cloud_name;
            }
            if (this.extension != null) {
                data.extension = this.extension;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (this.url.length)
                writer.writeString(2, this.url);
            if (this.width != 0)
                writer.writeInt32(3, this.width);
            if (this.height != 0)
                writer.writeInt32(4, this.height);
            if (this.cloud_name.length)
                writer.writeString(6, this.cloud_name);
            if (this.extension.length)
                writer.writeString(7, this.extension);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Image {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Image();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        message.url = reader.readString();
                        break;
                    case 3:
                        message.width = reader.readInt32();
                        break;
                    case 4:
                        message.height = reader.readInt32();
                        break;
                    case 6:
                        message.cloud_name = reader.readString();
                        break;
                    case 7:
                        message.extension = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Image {
            return Image.deserialize(bytes);
        }
    }
}
