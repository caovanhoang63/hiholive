/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: hls.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace pb {
    export class NewHlsStreamReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            stream_id?: string;
            stream_key?: string;
            server_url?: string;
            resolution?: number;
            fps?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("stream_id" in data && data.stream_id != undefined) {
                    this.stream_id = data.stream_id;
                }
                if ("stream_key" in data && data.stream_key != undefined) {
                    this.stream_key = data.stream_key;
                }
                if ("server_url" in data && data.server_url != undefined) {
                    this.server_url = data.server_url;
                }
                if ("resolution" in data && data.resolution != undefined) {
                    this.resolution = data.resolution;
                }
                if ("fps" in data && data.fps != undefined) {
                    this.fps = data.fps;
                }
            }
        }
        get stream_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set stream_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get stream_key() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set stream_key(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get server_url() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set server_url(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get resolution() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set resolution(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get fps() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set fps(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            stream_id?: string;
            stream_key?: string;
            server_url?: string;
            resolution?: number;
            fps?: number;
        }): NewHlsStreamReq {
            const message = new NewHlsStreamReq({});
            if (data.stream_id != null) {
                message.stream_id = data.stream_id;
            }
            if (data.stream_key != null) {
                message.stream_key = data.stream_key;
            }
            if (data.server_url != null) {
                message.server_url = data.server_url;
            }
            if (data.resolution != null) {
                message.resolution = data.resolution;
            }
            if (data.fps != null) {
                message.fps = data.fps;
            }
            return message;
        }
        toObject() {
            const data: {
                stream_id?: string;
                stream_key?: string;
                server_url?: string;
                resolution?: number;
                fps?: number;
            } = {};
            if (this.stream_id != null) {
                data.stream_id = this.stream_id;
            }
            if (this.stream_key != null) {
                data.stream_key = this.stream_key;
            }
            if (this.server_url != null) {
                data.server_url = this.server_url;
            }
            if (this.resolution != null) {
                data.resolution = this.resolution;
            }
            if (this.fps != null) {
                data.fps = this.fps;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.stream_id.length)
                writer.writeString(1, this.stream_id);
            if (this.stream_key.length)
                writer.writeString(2, this.stream_key);
            if (this.server_url.length)
                writer.writeString(3, this.server_url);
            if (this.resolution != 0)
                writer.writeInt32(4, this.resolution);
            if (this.fps != 0)
                writer.writeInt32(5, this.fps);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewHlsStreamReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewHlsStreamReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.stream_id = reader.readString();
                        break;
                    case 2:
                        message.stream_key = reader.readString();
                        break;
                    case 3:
                        message.server_url = reader.readString();
                        break;
                    case 4:
                        message.resolution = reader.readInt32();
                        break;
                    case 5:
                        message.fps = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewHlsStreamReq {
            return NewHlsStreamReq.deserialize(bytes);
        }
    }
    export class NewHlsStreamResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): NewHlsStreamResp {
            const message = new NewHlsStreamResp({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewHlsStreamResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewHlsStreamResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewHlsStreamResp {
            return NewHlsStreamResp.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedHlsServiceService {
        static definition = {
            NewHlsStream: {
                path: "/pb.HlsService/NewHlsStream",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: NewHlsStreamReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => NewHlsStreamReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: NewHlsStreamResp) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => NewHlsStreamResp.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract NewHlsStream(call: grpc_1.ServerUnaryCall<NewHlsStreamReq, NewHlsStreamResp>, callback: grpc_1.sendUnaryData<NewHlsStreamResp>): void;
    }
    export class HlsServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedHlsServiceService.definition, "HlsService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        NewHlsStream: GrpcUnaryServiceInterface<NewHlsStreamReq, NewHlsStreamResp> = (message: NewHlsStreamReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<NewHlsStreamResp>, options?: grpc_1.CallOptions | grpc_1.requestCallback<NewHlsStreamResp>, callback?: grpc_1.requestCallback<NewHlsStreamResp>): grpc_1.ClientUnaryCall => {
            return super.NewHlsStream(message, metadata, options, callback);
        };
    }
}
