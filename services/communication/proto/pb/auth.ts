/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: auth.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace pb {
    export class IntrospectReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            access_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("access_token" in data && data.access_token != undefined) {
                    this.access_token = data.access_token;
                }
            }
        }
        get access_token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set access_token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            access_token?: string;
        }): IntrospectReq {
            const message = new IntrospectReq({});
            if (data.access_token != null) {
                message.access_token = data.access_token;
            }
            return message;
        }
        toObject() {
            const data: {
                access_token?: string;
            } = {};
            if (this.access_token != null) {
                data.access_token = this.access_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.access_token.length)
                writer.writeString(1, this.access_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IntrospectReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IntrospectReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.access_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IntrospectReq {
            return IntrospectReq.deserialize(bytes);
        }
    }
    export class IntrospectResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tid?: string;
            sub?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tid" in data && data.tid != undefined) {
                    this.tid = data.tid;
                }
                if ("sub" in data && data.sub != undefined) {
                    this.sub = data.sub;
                }
            }
        }
        get tid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set tid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get sub() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set sub(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            tid?: string;
            sub?: string;
        }): IntrospectResp {
            const message = new IntrospectResp({});
            if (data.tid != null) {
                message.tid = data.tid;
            }
            if (data.sub != null) {
                message.sub = data.sub;
            }
            return message;
        }
        toObject() {
            const data: {
                tid?: string;
                sub?: string;
            } = {};
            if (this.tid != null) {
                data.tid = this.tid;
            }
            if (this.sub != null) {
                data.sub = this.sub;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tid.length)
                writer.writeString(1, this.tid);
            if (this.sub.length)
                writer.writeString(2, this.sub);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IntrospectResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IntrospectResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tid = reader.readString();
                        break;
                    case 2:
                        message.sub = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IntrospectResp {
            return IntrospectResp.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedAuthServiceService {
        static definition = {
            IntrospectToken: {
                path: "/pb.AuthService/IntrospectToken",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: IntrospectReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => IntrospectReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: IntrospectResp) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => IntrospectResp.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract IntrospectToken(call: grpc_1.ServerUnaryCall<IntrospectReq, IntrospectResp>, callback: grpc_1.sendUnaryData<IntrospectResp>): void;
    }
    export class AuthServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedAuthServiceService.definition, "AuthService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        IntrospectToken: GrpcUnaryServiceInterface<IntrospectReq, IntrospectResp> = (message: IntrospectReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<IntrospectResp>, options?: grpc_1.CallOptions | grpc_1.requestCallback<IntrospectResp>, callback?: grpc_1.requestCallback<IntrospectResp>): grpc_1.ClientUnaryCall => {
            return super.IntrospectToken(message, metadata, options, callback);
        };
    }
}
